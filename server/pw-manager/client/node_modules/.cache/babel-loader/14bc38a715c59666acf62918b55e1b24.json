{"ast":null,"code":"var _jsxFileName = \"/Users/jonalton/Documents/password_generator/Password-Manager/server/pw-manager/client/src/components/edit.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios';\nimport { withRouter } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Edit extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n    this.onChangeService = this.onChangeService.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      service: \"\",\n      username: \"\",\n      password: \"\",\n      records: []\n    };\n  } // This will get the record based on the id from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/record/\" + this.props.match.params.id).then(response => {\n      this.setState({\n        service: response.data.service,\n        username: response.data.username,\n        password: response.data.password\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // These methods will update the state properties.\n\n\n  onChangeService(e) {\n    this.setState({\n      service: e.target.value\n    });\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  } // This function will handle the submission.\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newEditedperson = {\n      service: this.state.service,\n      username: this.state.username,\n      password: this.state.password\n    };\n    console.log(newEditedperson); // This will send a post request to update the data in the database.\n\n    axios.post(\"http://localhost:5000/update/\" + this.props.match.params.id, newEditedperson).then(res => console.log(res.data));\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        align: \"center\",\n        children: \"Update Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Service: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.service,\n            onChange: this.onChangeService\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Username: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.username,\n            onChange: this.onChangeUsername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Password: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.password,\n            onChange: this.onChangePassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Update record\",\n            className: \"btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this);\n  }\n\n} // You can get access to the history object's properties and the closest <Route>'s match via the withRouter\n// higher-order component. This makes it easier for us to edit our records.\n\n\nexport default _c = withRouter(Edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/jonalton/Documents/password_generator/Password-Manager/server/pw-manager/client/src/components/edit.js"],"names":["React","Component","axios","withRouter","Edit","constructor","props","onChangeService","bind","onChangeUsername","onChangePassword","onSubmit","state","service","username","password","records","componentDidMount","get","match","params","id","then","response","setState","data","catch","error","console","log","e","target","value","preventDefault","newEditedperson","post","res","history","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\nimport { withRouter } from \"react-router-dom\";\n \nclass Edit extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n \n    this.onChangeService = this.onChangeService.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n \n    this.state = {\n      service: \"\",\n      username: \"\",\n      password: \"\",\n      records: [],\n    };\n  }\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/record/\" + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          service: response.data.service,\n          username: response.data.username,\n          password: response.data.password,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // These methods will update the state properties.\n  onChangeService(e) {\n    this.setState({\n      service: e.target.value,\n    });\n  }\n \n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value,\n    });\n  }\n \n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n \n  // This function will handle the submission.\n  onSubmit(e) {\n    e.preventDefault();\n    const newEditedperson = {\n      service: this.state.service,\n      username: this.state.username,\n      password: this.state.password,\n    };\n    console.log(newEditedperson);\n\n    // This will send a post request to update the data in the database.\n    axios\n      .post(\n        \"http://localhost:5000/update/\" + this.props.match.params.id,\n        newEditedperson\n      )\n      .then((res) => console.log(res.data));\n \n    this.props.history.push(\"/\");\n  }  \n\n  render(){\n      return (\n          <div>\n              <h3 align=\"center\">Update Record</h3>\n              <form onSubmit={this.onSubmit}>\n                  <div className=\"form-group\">\n                      <label>Service: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.service}\n                        onChange={this.onChangeService}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Username: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.username}\n                        onChange={this.onChangeUsername}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Password: </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={this.state.password}\n                        onChange={this.onChangePassword}\n                        />\n                  </div>\n                  <div className=\"form-group\">\n                      <input\n                        type=\"submit\"\n                        value=\"Update record\"\n                        className=\"btn-primary\"\n                        />\n                  </div>\n              </form>\n          </div>\n      );\n  }\n}\n\n// You can get access to the history object's properties and the closest <Route>'s match via the withRouter\n// higher-order component. This makes it easier for us to edit our records.\n \nexport default withRouter(Edit);"]},"metadata":{},"sourceType":"module"}